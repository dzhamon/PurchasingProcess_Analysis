import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
import warnings

warnings.filterwarnings("ignore")

class SupplierClusterAnalyzer:
    def __init__(self, df, column_mapping=None):
        self.df = df.copy()
        self.scaler = StandardScaler()
        self.clusters = None
        self.cluster_centers = None
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_mapping = {
            'counterparty_name': 'counterparty_name',
            'contract_signing_date': 'contract_signing_date',
            'total_contract_amount_eur': 'total_contract_amount_eur',
            'unit_price_eur': 'unit_price_eur',
            'project_name': 'project_name'
        }
        
        self.column_mapping = column_mapping or default_mapping
        self._validate_columns()
        
    def _validate_columns(self):
        """ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        missing = []
        for standard_name, actual_name in self.column_mapping.items():
            if actual_name not in self.df.columns:
                missing.append(actual_name)
        
        if missing:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(self.df.columns)}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
        
        print(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã!")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ DataFrame: {len(self.df)}")
        print(
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {self.df[self.column_mapping['counterparty_name']].nunique()}"
        )


    def prepare_supplier_features(self):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = [
            "counterparty_name",
            "total_contract_amount_eur",
            "unit_price_eur",
            "contract_signing_date",
            "project_name",
        ]
        missing_columns = [col for col in required_columns if col not in self.df.columns]
        
        if missing_columns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(self.df.columns)}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        
        print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(self.df)} –∑–∞–ø–∏—Å–µ–π...")
        print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {self.df['counterparty_name'].nunique()}")
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
        supplier_stats = (
            self.df.groupby(self.column_mapping['counterparty_name'])
            .agg(
                {
                    self.column_mapping['total_contract_amount_eur']: ['sum', 'mean', 'std', 'count'],
                    self.column_mapping['unit_price_eur']: ['mean', 'std'],
                    self.column_mapping['contract_signing_date']: ['min', 'max'],
                    self.column_mapping['project_name']: 'nunique',
                }
            )
            .reset_index()
        )

        # –°–≥–ª–∞–∂–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        supplier_stats.columns = [
            "counterparty_name",
            "total_volume",
            "avg_contract_value",
            "contract_value_std",
            "contracts_count",
            "avg_unit_price",
            "unit_price_std",
            "first_contract",
            "last_contract",
            "projects_count",
        ]

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        supplier_stats["years_active"] = (
            pd.to_datetime(supplier_stats["last_contract"])
            - pd.to_datetime(supplier_stats["first_contract"])
        ).dt.days / 365.25
        
        # –ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å(0)
        supplier_stats["price_volatility"] = (
            supplier_stats["unit_price_std"] / supplier_stats["avg_unit_price"].replace(0, np.nan)
        ).fillna(0)

        supplier_stats["avg_contracts_per_year"] = supplier_stats["contracts_count"] / (
            supplier_stats["years_active"] + 1
        )

        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
        supplier_stats = supplier_stats.fillna(0)

        return supplier_stats

    def find_optimal_clusters(self, features, max_clusters=10):
        """
        –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–º –ª–æ–∫—Ç—è –∏ —Å–∏–ª—É—ç—Ç–∞
        """
        inertias = []
        silhouette_scores = []
        K_range = range(2, max_clusters + 1)

        for k in K_range:
            kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
            kmeans.fit(features)
            inertias.append(kmeans.inertia_)
            silhouette_scores.append(silhouette_score(features, kmeans.labels_))

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

        # –ì—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è
        ax1.plot(K_range, inertias, "bo-")
        ax1.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        ax1.set_ylabel("–ò–Ω–µ—Ä—Ü–∏—è")
        ax1.set_title("–ú–µ—Ç–æ–¥ –ª–æ–∫—Ç—è")
        ax1.grid(True)

        # –ì—Ä–∞—Ñ–∏–∫ —Å–∏–ª—É—ç—Ç–∞
        ax2.plot(K_range, silhouette_scores, "ro-")
        ax2.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        ax2.set_ylabel("–°–∏–ª—É—ç—Ç-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
        ax2.set_title("–ê–Ω–∞–ª–∏–∑ —Å–∏–ª—É—ç—Ç–∞")
        ax2.grid(True)

        plt.tight_layout()
        plt.show()

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ k
        optimal_k = K_range[np.argmax(silhouette_scores)]
        print(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {optimal_k}")
        print(f"–°–∏–ª—É—ç—Ç-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {max(silhouette_scores):.3f}")

        return optimal_k

    def cluster_suppliers(self, n_clusters=None):
        """
        –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        """
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        supplier_stats = self.prepare_supplier_features()

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        feature_columns = [
            "total_volume",
            "avg_contract_value",
            "contracts_count",
            "avg_unit_price",
            "price_volatility",
            "projects_count",
            "years_active",
            "avg_contracts_per_year",
        ]

        features = supplier_stats[feature_columns]

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
        features_scaled = self.scaler.fit_transform(features)

        # –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        if n_clusters is None:
            n_clusters = self.find_optimal_clusters(features_scaled)

        # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        supplier_stats["cluster"] = kmeans.fit_predict(features_scaled)

        self.clusters = supplier_stats
        self.cluster_centers = kmeans.cluster_centers_

        return supplier_stats

    def analyze_clusters(self):
        """
        –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        """
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        cluster_summary = (
            self.clusters.groupby("cluster")
            .agg(
                {
                    "counterparty_name": "count",
                    "total_volume": "mean",
                    "avg_contract_value": "mean",
                    "contracts_count": "mean",
                    "avg_unit_price": "mean",
                    "price_volatility": "mean",
                    "projects_count": "mean",
                    "years_active": "mean",
                }
            )
            .round(2)
        )

        cluster_summary.columns = [
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            "–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º",
            "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
            "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤",
            "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É",
            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤",
            "–õ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        ]

        print("=== –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ö–õ–ê–°–¢–ï–†–û–í ===")
        print(cluster_summary)

        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        print("\n=== –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ö–õ–ê–°–¢–ï–†–û–í ===")
        for cluster_id in sorted(self.clusters["cluster"].unique()):
            cluster_data = cluster_summary.loc[cluster_id]

            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (
                cluster_data["–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º"]
                > cluster_summary["–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º"].median()
            ):
                if cluster_data["–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"] < 0.2:
                    category = "üèÜ –ü–†–ï–ú–ò–£–ú (–∫—Ä—É–ø–Ω—ã–µ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)"
                else:
                    category = "‚ö° –ö–†–£–ü–ù–´–ï (–≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º, –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)"
            elif cluster_data["–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"] > 5:
                category = "üîÑ –ê–ö–¢–ò–í–ù–´–ï (—á–∞—Å—Ç—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–∫—É–ø–∫–∏)"
            else:
                if cluster_data["–õ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"] < 1:
                    category = "üÜï –ù–û–í–´–ï (–Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å)"
                else:
                    category = "üìâ –†–ï–î–ö–ò–ï (–Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)"

            print(f"–ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {category}")
            print(f"  –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {cluster_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {cluster_data['–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º']:,.0f} EUR")
            print(f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {cluster_data['–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω']:.2f}")
            print()

        return cluster_summary

    def visualize_clusters(self):
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        """
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PCA
        feature_columns = [
            "total_volume",
            "avg_contract_value",
            "contracts_count",
            "avg_unit_price",
            "price_volatility",
            "projects_count",
            "years_active",
            "avg_contracts_per_year",
        ]

        features = self.clusters[feature_columns]
        features_scaled = self.scaler.transform(features)

        # PCA –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        pca = PCA(n_components=2)
        features_pca = pca.fit_transform(features_scaled)

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        plot_data = pd.DataFrame(
            {
                "PC1": features_pca[:, 0],
                "PC2": features_pca[:, 1],
                "cluster": self.clusters["cluster"],
                "supplier": self.clusters["counterparty_name"],
                "total_volume": self.clusters["total_volume"],
            }
        )

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plt.figure(figsize=(12, 8))

        # –û—Å–Ω–æ–≤–Ω–æ–π scatter plot
        scatter = plt.scatter(
            plot_data["PC1"],
            plot_data["PC2"],
            c=plot_data["cluster"],
            s=np.sqrt(plot_data["total_volume"]) / 100,  # —Ä–∞–∑–º–µ—Ä –ø–æ –æ–±—ä–µ–º—É
            alpha=0.7,
            cmap="tab10",
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        top_suppliers = plot_data.nlargest(10, "total_volume")
        for _, row in top_suppliers.iterrows():
            plt.annotate(
                (
                    row["supplier"][:20] + "..."
                    if len(row["supplier"]) > 20
                    else row["supplier"]
                ),
                (row["PC1"], row["PC2"]),
                xytext=(5, 5),
                textcoords="offset points",
                fontsize=8,
                alpha=0.8,
            )

        plt.colorbar(scatter, label="–ö–ª–∞—Å—Ç–µ—Ä")
        plt.xlabel(f"PC1 ({pca.explained_variance_ratio_[0]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)")
        plt.ylabel(f"PC2 ({pca.explained_variance_ratio_[1]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)")
        plt.title("–ö–ª–∞—Å—Ç–µ—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (—Ä–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ = –æ–±—ä–µ–º –∑–∞–∫—É–ø–æ–∫)")
        plt.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.show()

        print(f"PCA –æ–±—ä—è—Å–Ω—è–µ—Ç {pca.explained_variance_ratio_.sum():.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏")

    def get_cluster_recommendations(self):
        """
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
        """
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return

        recommendations = {
            "üèÜ –ü–†–ï–ú–ò–£–ú": [
                "–†–∞–∑–≤–∏–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ",
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–∞—Ö",
                "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            ],
            "‚ö° –ö–†–£–ü–ù–´–ï": [
                "–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–µ–π —Ü–µ–Ω",
                "–ó–∞–∫–ª—é—á–∞—Ç—å —Ä–∞–º–æ—á–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
                "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞",
            ],
            "üîÑ –ê–ö–¢–ò–í–ù–´–ï": [
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–∫–∞–∑–∞",
                "–í–Ω–µ–¥—Ä–∏—Ç—å EDI-—Å–∏—Å—Ç–µ–º—ã",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É",
            ],
            "üÜï –ù–û–í–´–ï": [
                "–¢—â–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏",
                "–ù–∞—á–∏–Ω–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤",
                "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            ],
            "üìâ –†–ï–î–ö–ò–ï": [
                "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
                "–ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
                "–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
            ],
        }

        print("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–õ–ê–°–¢–ï–†–ê–ú ===")
        for category, recs in recommendations.items():
            print(f"\n{category}:")
            for i, rec in enumerate(recs, 1):
                print(f"  {i}. {rec}")


def  run_supplier_clustering(df):
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    """
    print("–ö–æ–ª–æ–Ω–∫–∏ DataFrame :", df.columns)
    analyzer = SupplierClusterAnalyzer(df)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    supplier_clusters = analyzer.cluster_suppliers()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    cluster_summary = analyzer.analyze_clusters()

    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyzer.visualize_clusters()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    analyzer.get_cluster_recommendations()

    return supplier_clusters, analyzer

