"""
    –í–µ—Ä—Å–∏—è v2 –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
import warnings

warnings.filterwarnings("ignore")


class EnhancedSupplierClusterAnalyzer:
    def __init__(self, df, column_mapping=None):
        self.df = df.copy()
        self.scaler = StandardScaler()
        self.clusters = None
        self.cluster_centers = None

    def prepare_enhanced_supplier_features(self):
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        """
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(self.df)} –∑–∞–ø–∏—Å–µ–π...")
        print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {self.df['counterparty_name'].nunique()}")
        
        # —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        df_clean = self.df.copy()
        
        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        numeric_columns = [
            "total_contract_amount_eur", "unit_price_eur", "quantity", "delivery_time_days",
            "product_amount", "additional_expenses"
        ]
        # optional_numeric = ['product_amount', 'additional_expenses']

        for col in numeric_columns:
            if col in df_clean.columns:
                df_clean[col] = pd.to_numeric(df_clean[col], errors="coerce")
                print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ {col}, NaN –∑–Ω–∞—á–µ–Ω–∏–π: {df_clean[col].isna().sum()}")
                
    
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª—è–º–∏ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        df_clean[numeric_columns] = df_clean[numeric_columns].fillna(0)
        if "product_amount" in df_clean.columns:
            df_clean["product_amount"] = df_clean["product_amount"].fillna(0)
        if "additional_expenses" in df_clean.columns:
            df_clean["additional_expenses"] = df_clean["additional_expenses"].fillna(0)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        agg_dict = {
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            "total_contract_amount_eur": ["sum", "mean", "std", "count", "min", "max"],
            "unit_price_eur": ["mean", "std", "min", "max"],
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            "contract_signing_date": ["min", "max"],
            "delivery_time_days": ["mean", "std", "min", "max"],
            # –û–±—ä–µ–º–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            "quantity": ["sum", "mean", "std", "min", "max"],
            # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            "project_name": "nunique",
            "product_name": "nunique",
            "unit": "nunique",
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if "product_amount" in df_clean.columns:
            agg_dict["product_amount"] = ["sum", "mean", "std"]
        if "additional_expenses" in df_clean.columns:
            agg_dict["additional_expenses"] = ["sum", "mean"]
        if "discipline" in df_clean.columns:
            agg_dict["discipline"] = "nunique"
        if "contract_currency" in df_clean.columns:
            agg_dict["contract_currency"] = "nunique"


        # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
        supplier_stats = (df_clean.groupby('counterparty_name')
                    .agg(agg_dict).reset_index()
                          )
        # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
        print("üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:")
        print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(supplier_stats.columns)}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: {list(supplier_stats.columns)}")
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ (–∏–∑ –º–Ω–æ–≥–æ–∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–µ–ª–∞–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü —Å –æ–¥–Ω–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º)
        new_columns = []
        for col in supplier_stats.columns:
            if isinstance(col, tuple):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä—Ç–µ–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                if len(col) > 1 and col[1] == "nunique":
                    new_columns.append(f"{col[0]}_count")
                elif len(col) > 1:
                    new_columns.append(f"{col[0]}_{col[1]}")
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
                    new_columns.append(col[0])
            else:
                new_columns.append(col)
        supplier_stats.columns = new_columns
        
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        
        # 1. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        supplier_stats["years_active"] = np.maximum(
            (pd.to_datetime(supplier_stats["contract_signing_date_max"])
             - pd.to_datetime(supplier_stats["contract_signing_date_min"])
        ).dt.days / 365.25, 0.1)
        
        supplier_stats["avg_contracts_per_year"] = supplier_stats["total_contract_amount_eur_count"] / (
            supplier_stats["years_active"] + 1
        )
        
        # 2. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        supplier_stats["price_volatility"] = (
            supplier_stats["unit_price_eur_std"]
            / supplier_stats["unit_price_eur_mean"].replace(0, np.nan)
        ).fillna(0)
        
        supplier_stats["contract_size_volatility"] = (
            supplier_stats["total_contract_amount_eur_std"]
            / supplier_stats["total_contract_amount_eur_sum"].replace(0, np.nan)
        ).fillna(0)
        
        supplier_stats["quantity_volatility"] = (
            supplier_stats["quantity_std"] / supplier_stats["quantity_mean"].replace(0, np.nan)
        ).fillna(0)
        
        supplier_stats["delivery_volatility"] = (
            supplier_stats["delivery_time_days_std"]
            / supplier_stats["delivery_time_days_mean"].replace(0, np.nan)
        ).fillna(0)
        
        # 3. –†–∞–∑–º–µ—Ä –∏ –º–∞—Å—à—Ç–∞–± –æ–ø–µ—Ä–∞—Ü–∏–π
        supplier_stats["avg_contract_size_rank"] = supplier_stats["total_contract_amount_eur_sum"].rank(
            pct=True
        )
        supplier_stats["total_volume_rank"] = supplier_stats["total_contract_amount_eur_sum"].rank(pct=True)
        
        supplier_stats["contract_size_range"] = (
            supplier_stats["total_contract_amount_eur_max"] - supplier_stats["total_contract_amount_eur_min"]
        )
        
        supplier_stats["price_range"] = (
            supplier_stats["unit_price_eur_max"] - supplier_stats["unit_price_eur_min"]
        )
        
        # 4. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        supplier_stats["diversification_index"] = (
            np.log1p(supplier_stats["project_name_count"])
            * np.log1p(supplier_stats["product_name_count"])
            * np.log1p(supplier_stats["unit_count"])
            * np.log1p(supplier_stats.get("discipline_count", 1))
        ) ** 0.25  # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        
        supplier_stats["specialization_ratio"] = supplier_stats[
            "total_contract_amount_eur_count"
        ] / supplier_stats["product_name_count"].replace(0, 1)
        
        # 5. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
        supplier_stats["delivery_efficiency"] = 1 / (
            supplier_stats["delivery_time_days_mean"] + 1
        )  # –ß–µ–º –º–µ–Ω—å—à–µ –≤—Ä–µ–º—è, —Ç–µ–º –≤—ã—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        supplier_stats["contract_consistency"] = 1 / (
            supplier_stats["contract_size_volatility"] + 0.1
        )  # –ß–µ–º –º–µ–Ω—å—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–º –≤—ã—à–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        
        # 6. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –µ—Å—Ç—å)
        if "additional_expenses_sum" in supplier_stats.columns:
            supplier_stats["additional_expenses_ratio"] = (
                supplier_stats["additional_expenses_sum"]
                / supplier_stats["total_contract_amount_eur_sum"].replace(0, np.nan)
            ).fillna(0)
        else:
            supplier_stats["additional_expenses_ratio"] = 0
        
        # 7. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
        supplier_stats["avg_quantity_per_contract"] = (
            supplier_stats["quantity_sum"] / supplier_stats["total_contract_amount_eur_count"]
        )
        
        supplier_stats["revenue_per_project"] = supplier_stats["total_contract_amount_eur_sum"] / supplier_stats[
            "project_name_count"].replace(0, 1)
        
        # 8. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º)
        if len(df_clean) > 100:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            monthly_activity = df_clean.copy()
            monthly_activity["month"] = pd.to_datetime(
                monthly_activity["contract_signing_date"]
            ).dt.month
            monthly_var = (
                monthly_activity.groupby(["counterparty_name", "month"])
                .size()
                .unstack(fill_value=0)
                .var(axis=1)
            )
            supplier_stats.rename(columns={"counterparty_name_": "counterparty_name"}, inplace=True)
            supplier_stats = supplier_stats.merge(
                monthly_var.rename("seasonal_variance").reset_index(),
                on="counterparty_name",
                how="left",
            )
            supplier_stats["seasonal_variance"] = supplier_stats["seasonal_variance"].fillna(0)
        else:
            supplier_stats["seasonal_variance"] = 0
        
        # 9. –†–∏—Å–∫-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ -
        supplier_stats["single_client_dependency"] = (
            1 / supplier_stats["project_name_count"]  # –ß–µ–º –º–µ–Ω—å—à–µ –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ç–µ–º –≤—ã—à–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        )
        
        supplier_stats["price_stability_score"] = 1 / (supplier_stats["price_volatility"] + 0.1)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
        supplier_stats = supplier_stats.fillna(0)
        
        # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
        supplier_stats = supplier_stats.replace([np.inf, -np.inf], [999999, -999999])
        
        print(
            f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(supplier_stats.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {len(supplier_stats)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
        )
        
        return supplier_stats
        
        
        
    def get_enhanced_feature_columns(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
        
        rename_mapping = {
            "total_contract_amount_eur_sum": "total_volume",
            "total_contract_amount_eur_mean": "avg_contract_value",
            "total_contract_amount_eur_count": "contracts_count",
            "quantity_sum": "total_quantity",
            "quantity_mean": "avg_quantity",
            "unit_price_eur_mean": "avg_unit_price",
            "price_volatility": "price_volatility",
            "price_range": "price_range",
            "unit_price_eur_min": "min_unit_price",
            "unit_price_eur_max": "max_unit_price",
            "contract_size_volatility": "contract_size_volatility",
            "contract_size_range": "contract_size_range",
            "total_contract_amount_eur_min": "min_contract_value",
            "total_contract_amount_eur_max": "max_contract_value",
            "years_active": "years_active",
            "avg_contracts_per_year": "avg_contracts_per_year",
            "delivery_time_days_mean": "avg_delivery_time",
            "delivery_volatility": "delivery_volatility",
            "delivery_time_days_min": "min_delivery_time",
            "delivery_time_days_max": "max_delivery_time",
            "project_name_count": "projects_count",
            "product_name_count": "products_count",
            "unit_count": "units_count",
            "discipline_count": "disciplines_count",
            "diversification_index": "diversification_index",
            "specialization_ratio": "specialization_ratio",
            "delivery_efficiency": "delivery_efficiency",
            "contract_consistency": "contract_consistency",
            "price_stability_score": "price_stability_score",
            "quantity_volatility": "quantity_volatility",
            "additional_expenses_ratio": "additional_expenses_ratio",
            "avg_quantity_per_contract": "avg_quantity_per_contract",
            "revenue_per_project": "revenue_per_project",
            "avg_contract_size_rank": "avg_contract_size_rank",
            "total_volume_rank": "total_volume_rank",
            "single_client_dependency": "single_client_dependency",
            "seasonal_variance": "seasonal_variance",
        }
        return rename_mapping
        
    def find_optimal_clusters(self, features, max_clusters=10):
        """–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–º –ª–æ–∫—Ç—è –∏ —Å–∏–ª—É—ç—Ç–∞"""
        inertias = []
        silhouette_scores = []
        K_range = range(2, max_clusters + 1)

        for k in K_range:
            kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
            kmeans.fit(features)
            inertias.append(kmeans.inertia_)
            silhouette_scores.append(silhouette_score(features, kmeans.labels_))

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

        # –ì—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è
        ax1.plot(K_range, inertias, "bo-")
        ax1.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        ax1.set_ylabel("–ò–Ω–µ—Ä—Ü–∏—è")
        ax1.set_title("–ú–µ—Ç–æ–¥ –ª–æ–∫—Ç—è")
        ax1.grid(True)

        # –ì—Ä–∞—Ñ–∏–∫ —Å–∏–ª—É—ç—Ç–∞
        ax2.plot(K_range, silhouette_scores, "ro-")
        ax2.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        ax2.set_ylabel("–°–∏–ª—É—ç—Ç-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
        ax2.set_title("–ê–Ω–∞–ª–∏–∑ —Å–∏–ª—É—ç—Ç–∞")
        ax2.grid(True)

        plt.tight_layout()
        plt.show()

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ k
        optimal_k = K_range[np.argmax(silhouette_scores)]
        print(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {optimal_k}")
        print(f"–°–∏–ª—É—ç—Ç-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {max(silhouette_scores):.3f}")

        return optimal_k

    def cluster_suppliers(self, n_clusters=None):
        """–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        supplier_stats = self.prepare_enhanced_supplier_features() # –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        rename_mapping = self.get_enhanced_feature_columns()

        # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
        
        supplier_stats.rename(columns=rename_mapping, inplace=True)
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(supplier_stats.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã (–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø–æ –æ–±—ä–µ–º—É
        volume_q99 = supplier_stats["total_volume"].quantile(0.99)
        outliers_mask = supplier_stats["total_volume"] > volume_q99
        
        if outliers_mask.sum() > 0:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {outliers_mask.sum()} –≤—ã–±—Ä–æ—Å–æ–≤ (—Å—É–ø–µ—Ä-–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤):")
            outliers = supplier_stats[outliers_mask]["counterparty_name"].tolist()
            for outlier in outliers:
                volume = supplier_stats[
                    outliers_mask & (supplier_stats["counterparty_name"] == outlier)
                ]["total_volume"].iloc[0]
                print(f"   - {outlier}: {volume:,.0f} EUR")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        normal_suppliers = supplier_stats[~outliers_mask].copy()
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        numerical_features = normal_suppliers.select_dtypes(include=['number']).columns.tolist()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        features_for_clustering = [col for col in numerical_features if col not in ['counterparty_name']]
        
        print(f"üéØ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º {len(normal_suppliers)} –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        
        normal_features_to_scale = normal_suppliers[features_for_clustering]

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤)
        normal_features_scaled = self.scaler.fit_transform(normal_features_to_scale)

        # –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 3)
        if n_clusters is None:
            optimal_k = self.find_optimal_clusters(normal_features_scaled, max_clusters=8)
            n_clusters = max(optimal_k, 3) # –º–∏–Ω–∏–º—É–º 3 –∫–ª–∞—Å—Ç–µ—Ä–∞
        
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º {n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")

        # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å—ã
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        normal_suppliers["cluster"] = kmeans.fit_predict(normal_features_scaled)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
        if outliers_mask.sum() > 0:
            outlier_suppliers = supplier_stats[outliers_mask].copy()
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–æ—Å—É —Å–≤–æ–π –∫–ª–∞—Å—Ç–µ—Ä
            outlier_suppliers["cluster"] = range(
                n_clusters, n_clusters + len(outlier_suppliers)
            )
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            supplier_stats_final = pd.concat(
                [normal_suppliers, outlier_suppliers], ignore_index=True
            )
        else:
            supplier_stats_final = normal_suppliers

        self.clusters = supplier_stats_final
        self.cluster_centers = kmeans.cluster_centers_
        self.feature_columns = features_for_clustering

        return supplier_stats_final

    def analyze_enhanced_clusters(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return

        # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        key_metrics = [
            "total_volume",
            "avg_contract_value",
            "contracts_count",
            "price_volatility",
            "years_active",
            "projects_count",
            "diversification_index",
            "delivery_efficiency",
            "contract_consistency",
            "specialization_ratio",
        ]

        available_metrics = [col for col in key_metrics if col in self.clusters.columns and col != 'counterparty_name']

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        cluster_summary = (
            self.clusters.groupby("cluster")
            .agg(
                {
                    "counterparty_name": "count",
                    **{col: "mean" for col in available_metrics},
                }
            )
            .round(3)
        )

        cluster_summary.columns = ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] + [
            col.replace("_", " ").title() for col in available_metrics
        ]

        print("=== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê –ö–õ–ê–°–¢–ï–†–û–í ===")
        print(cluster_summary)

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        print("\n=== –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ö–õ–ê–°–¢–ï–†–û–í ===")
        for cluster_id in sorted(self.clusters["cluster"].unique()):
            cluster_data = self.clusters[self.clusters["cluster"] == cluster_id]
            # cluster_data - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É ‚Ññ cluster_id (–≤ –±—É–¥—É—â–µ–º –≤—ã–Ω–µ—Å—Ç–∏ –≤ Excel)
            # –†–∞—Å—á–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞
            avg_volume = cluster_data["total_volume"].mean()
            avg_volatility = (
                cluster_data["price_volatility"].mean()
                if "price_volatility" in cluster_data.columns
                else 0
            )
            avg_projects = cluster_data["projects_count"].mean()
            avg_contracts = cluster_data["contracts_count"].mean()
            avg_years = cluster_data["years_active"].mean()

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if avg_volume > self.clusters["total_volume"].quantile(0.8):
                if avg_volatility < 0.2 and avg_years > 2:
                    category = "üèÜ PREMIUM (–∫—Ä—É–ø–Ω—ã–µ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ, –æ–ø—ã—Ç–Ω—ã–µ)"
                else:
                    category = "‚ö° –ö–†–£–ü–ù–´–ï (–≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º, –Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)"
            elif avg_contracts > self.clusters["contracts_count"].quantile(0.7):
                if avg_projects > 3:
                    category = "üîÑ –ê–ö–¢–ò–í–ù–´–ï –£–ù–ò–í–ï–†–°–ê–õ–´ (—á–∞—Å—Ç—ã–µ –∑–∞–∫–∞–∑—ã, –º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤)"
                else:
                    category = (
                        "üîÑ –ê–ö–¢–ò–í–ù–´–ï –°–ü–ï–¶–ò–ê–õ–ò–°–¢–´ (—á–∞—Å—Ç—ã–µ –∑–∞–∫–∞–∑—ã, —É–∑–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"
                    )
            elif avg_years < 1:
                category = "üÜï –ù–û–í–´–ï (–Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å)"
            elif avg_projects == 1:
                category = "üéØ –£–ó–ö–û–°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)"
            else:
                category = "üìâ –†–ï–î–ö–ò–ï (–Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)"

            print(f"\n–ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {category}")
            print(f"  –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len(cluster_data)}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {avg_volume:,.0f} EUR")
            print(f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω: {avg_volatility:.3f}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {avg_projects:.1f}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {avg_contracts:.1f}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {avg_years:.1f} –ª–µ—Ç")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø- –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
            top_suppliers = cluster_data.nlargest(5, "total_volume")[
                "counterparty_name"
            ].tolist()
            print(
                f"  –¢–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏: {', '.join(top_suppliers[:4])}{'...' if len(top_suppliers) > 4 else ''}"
            )

        return cluster_summary
    
    def visualize_enhanced_clusters(self, output_folder):
        import os
        import pandas as pd
        import numpy as np
        from sklearn.decomposition import PCA
        import matplotlib.pyplot as plt
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É.
        """
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return
    
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_folder}")
    
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PCA
        features = self.clusters[self.feature_columns]
        features_scaled = self.scaler.transform(features)
    
        # PCA –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        pca = PCA(n_components=2)
        features_pca = pca.fit_transform(features_scaled)
    
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        plot_data = pd.DataFrame(
            {
                "PC1": features_pca[:, 0],
                "PC2": features_pca[:, 1],
                "cluster": self.clusters["cluster"],
                "supplier": self.clusters["counterparty_name"],
                "total_volume": self.clusters["total_volume"],
                "contracts_count": self.clusters["contracts_count"],
                "diversification": self.clusters.get("diversification_index", 1),
            }
        )
    
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
        # 1. –û—Å–Ω–æ–≤–Ω–æ–π PCA scatter plot
        scatter1 = ax1.scatter(
            plot_data["PC1"],
            plot_data["PC2"],
            c=plot_data["cluster"],
            s=np.sqrt(plot_data["total_volume"]) / 50,
            alpha=0.7,
            cmap="tab10",
        )
        ax1.set_xlabel(f"PC1 ({pca.explained_variance_ratio_[0]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)")
        ax1.set_ylabel(f"PC2 ({pca.explained_variance_ratio_[1]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)")
        ax1.set_title("PCA –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (—Ä–∞–∑–º–µ—Ä = –æ–±—ä–µ–º –∑–∞–∫—É–ø–æ–∫)")
        ax1.grid(True, alpha=0.3)
        plt.colorbar(scatter1, ax=ax1, label="–ö–ª–∞—Å—Ç–µ—Ä")
    
        # 2. –û–±—ä–µ–º vs –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        scatter2 = ax2.scatter(
            self.clusters["total_volume"],
            self.clusters["contracts_count"],
            c=self.clusters["cluster"],
            alpha=0.7,
            cmap="tab10",
        )
        ax2.set_xlabel("–û–±—â–∏–π –æ–±—ä–µ–º (EUR)")
        ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        ax2.set_title("–û–±—ä–µ–º vs –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        ax2.set_xscale("log")
        ax2.grid(True, alpha=0.3)
    
        # 3. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å vs –†–∞–∑–º–µ—Ä
        if "price_volatility" in self.clusters.columns:
            scatter3 = ax3.scatter(
                self.clusters["price_volatility"],
                self.clusters["avg_contract_value"],
                c=self.clusters["cluster"],
                alpha=0.7,
                cmap="tab10",
            )
            ax3.set_xlabel("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω")
            ax3.set_ylabel("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (EUR)")
            ax3.set_title("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å vs –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
            ax3.set_yscale("log")
            ax3.grid(True, alpha=0.3)
    
        # 4. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è vs –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if (
            "diversification_index" in self.clusters.columns
            and "specialization_ratio" in self.clusters.columns
        ):
            scatter4 = ax4.scatter(
                self.clusters["diversification_index"],
                self.clusters["specialization_ratio"],
                c=self.clusters["cluster"],
                alpha=0.7,
                cmap="tab10",
            )
            ax4.set_xlabel("–ò–Ω–¥–µ–∫—Å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            ax4.set_ylabel("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            ax4.set_title("–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è vs –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
            ax4.grid(True, alpha=0.3)
    
        plt.tight_layout()
    
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        full_path_visualization = os.path.join(output_folder, "cluster_visualization.png")
        plt.savefig(full_path_visualization)
    
        plt.show()
    
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {full_path_visualization}")
        print(f"PCA –æ–±—ä—è—Å–Ω—è–µ—Ç {pca.explained_variance_ratio_.sum():.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏")
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(self.feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")

    def get_enhanced_recommendations(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏"""
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return

        recommendations = {
            "üèÜ PREMIUM": [
                "–†–∞–∑–≤–∏–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ",
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–∞—Ö",
                "–ó–∞–∫–ª—é—á–∞—Ç—å —Ä–∞–º–æ—á–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö",
                "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
            ],
            "‚ö° –ö–†–£–ü–ù–´–ï": [
                "–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–µ–π —Ü–µ–Ω",
                "–ó–∞–∫–ª—é—á–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏",
                "–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞",
                "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
                "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            ],
            "üîÑ –ê–ö–¢–ò–í–ù–´–ï": [
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–∫–∞–∑–∞",
                "–í–Ω–µ–¥—Ä–∏—Ç—å EDI-—Å–∏—Å—Ç–µ–º—ã",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É",
                "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π",
                "–£–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
            ],
            "üéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï": [
                "–£–≥–ª—É–±–ª—è—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –≤ –∏—Ö –æ–±–ª–∞—Å—Ç–∏",
                "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º",
                "–†–∞–∑–≤–∏–≤–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞",
                "–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –≤—ã—Å—Ç–∞–≤–∫–∞—Ö –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö",
            ],
            "üÜï –ù–û–í–´–ï": [
                "–¢—â–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏",
                "–ù–∞—á–∏–Ω–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤",
                "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                "–û–±—É—á–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ",
            ],
            "üìâ –†–ï–î–ö–ò–ï": [
                "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
                "–ù–∞–π—Ç–∏ –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
                "–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏",
            ],
        }

        print("=== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–õ–ê–°–¢–ï–†–ê–ú ===")
        for category, recs in recommendations.items():
            print(f"\n{category}:")
            for i, rec in enumerate(recs, 1):
                print(f"  {i}. {rec}")

    def save_results_to_excel(self, output_folder):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Excel-—Ñ–∞–π–ª—ã.
        """
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        import os
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_folder}")

        # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
        full_path_clusters = os.path.join(output_folder, "supplier_clusters.xlsx")
        self.clusters.to_excel(full_path_clusters, index=False)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {full_path_clusters}")

        # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        cluster_summary = self.analyze_enhanced_clusters()
        full_path_summary = os.path.join(output_folder, "cluster_summary.xlsx")
        cluster_summary.to_excel(full_path_summary)
        print(f"‚úÖ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {full_path_summary}")

        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        outliers_mask = (self.clusters['cluster'] >= self.clusters['cluster'].nunique() -
                         len(self.clusters[self.clusters['cluster'].duplicated(keep=False) == False]))
        if outliers_mask.any():
            outliers_df = self.clusters[outliers_mask]
            full_path_outliers = os.path.join(output_folder, "outlier_suppliers.xlsx")
            outliers_df.to_excel(full_path_outliers, index=False)
            print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {full_path_outliers}")
    
    def save_cluster_interpretation_to_excel(self, output_folder):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ Excel.
        """
        if self.clusters is None:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
            return
    
        import os
        import pandas as pd
    
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_folder}")
    
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        interpretation_data = []
    
        # –¶–∏–∫–ª –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        for cluster_id in sorted(self.clusters["cluster"].unique()):
            cluster_data = self.clusters[self.clusters["cluster"] == cluster_id]
    
            # –†–∞—Å—á–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞
            avg_volume = cluster_data["total_volume"].mean()
            avg_volatility = (
                cluster_data["price_volatility"].mean()
                if "price_volatility" in cluster_data.columns
                else 0
            )
            avg_projects = cluster_data["projects_count"].mean()
            avg_contracts = cluster_data["contracts_count"].mean()
            avg_years = cluster_data["years_active"].mean()
    
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if avg_volume > self.clusters["total_volume"].quantile(0.8):
                if avg_volatility < 0.2 and avg_years > 2:
                    category = "üèÜ PREMIUM (–∫—Ä—É–ø–Ω—ã–µ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ, –æ–ø—ã—Ç–Ω—ã–µ)"
                else:
                    category = "‚ö° –ö–†–£–ü–ù–´–ï (–≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º, –Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)"
            elif avg_contracts > self.clusters["contracts_count"].quantile(0.7):
                if avg_projects > 3:
                    category = "üîÑ –ê–ö–¢–ò–í–ù–´–ï –£–ù–ò–í–ï–†–°–ê–õ–´ (—á–∞—Å—Ç—ã–µ –∑–∞–∫–∞–∑—ã, –º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤)"
                else:
                    category = (
                        "üîÑ –ê–ö–¢–ò–í–ù–´–ï –°–ü–ï–¶–ò–ê–õ–ò–°–¢–´ (—á–∞—Å—Ç—ã–µ –∑–∞–∫–∞–∑—ã, —É–∑–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"
                    )
            elif avg_years < 1:
                category = "üÜï –ù–û–í–´–ï (–Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å)"
            elif avg_projects == 1:
                category = "üéØ –£–ó–ö–û–°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)"
            else:
                category = "üìâ –†–ï–î–ö–ò–ï (–Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)"
    
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            top_suppliers = cluster_data.nlargest(5, "total_volume")[
                "counterparty_name"
            ].tolist()
    
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫
            interpretation_data.append(
                {
                    "Cluster ID": cluster_id,
                    "Category": category,
                    "Number of Suppliers": len(cluster_data),
                    "Average Volume (EUR)": round(avg_volume, 2),
                    "Price Volatility": round(avg_volatility, 3),
                    "Average Projects": round(avg_projects, 1),
                    "Average Contracts": round(avg_contracts, 1),
                    "Average Years Active": round(avg_years, 1),
                    "Top Suppliers": ", ".join(top_suppliers),
                }
            )
    
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        interpretation_df = pd.DataFrame(interpretation_data)
    
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        full_path_interpretation = os.path.join(
            output_folder, "cluster_interpretation.xlsx"
        )
        interpretation_df.to_excel(full_path_interpretation, index=False)
    
        print(
            f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {full_path_interpretation}"
        )

def run_enhanced_supplier_clustering(df, output_folder=r'D:\Analysis-Results\Cluster_Analysis'):
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    """
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", list(df.columns))

    analyzer = EnhancedSupplierClusterAnalyzer(df)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    supplier_clusters = analyzer.cluster_suppliers()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    cluster_summary = analyzer.analyze_enhanced_clusters()

    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyzer.visualize_enhanced_clusters(output_folder)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    analyzer.get_enhanced_recommendations()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel
    analyzer.save_results_to_excel(output_folder)
    analyzer.save_cluster_interpretation_to_excel(output_folder)

    return supplier_clusters, analyzer
