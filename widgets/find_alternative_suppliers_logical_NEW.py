import pandas as pd
from typing import Dict, Any


class AlternativeSuppliersAnalyzer:
    def __init__(self):
        self.all_contracts_data = (
            None  # –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø—Ä–∏–Ω—è—Ç—ã–π DataFrame self.base_contract_df
        )

    # –≠—Ç–æ –º–µ—Ç–æ–¥-—Å–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å DataFrame
    def receive_contract_data(self, df: pd.DataFrame):
        print("–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª!")
        self.all_contracts_data = df


def find_alternative_suppliers_logical(
    current_project_data, all_contracts_data, discipline
):
    """
    –õ–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

    Args:
                    current_project_data: –î–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
                    all_contracts_data: –í–°–ï –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
                    discipline: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞

    Returns:
                    dict: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """

    print(f"üîç –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {discipline}")
    print("=" * 60)

    alternatives_by_product = {}

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    current_products = current_project_data["product_name"].unique()

    for product in current_products:
        print(f"\nüì¶ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")

        # –¢–µ–∫—É—â–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú 'supplier_name'
        current_suppliers = (
            current_project_data[current_project_data["product_name"] == product][
                "supplier_name"
            ]
            .unique()
            .tolist()
        )
        print(f"–¢–µ–∫—É—â–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏: {', '.join(current_suppliers)}")

        # –ò—â–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–æ—Å—Ç–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤,
        # –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—É—â–∏–º–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã

        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
        product_contracts = all_contracts_data[
            all_contracts_data["product_name"] == product
        ]

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        all_product_suppliers = product_contracts["supplier_name"].unique()

        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        alternative_suppliers_names = [
            supplier
            for supplier in all_product_suppliers
            if supplier not in current_suppliers
        ]

        alternative_suppliers_details = []
        if alternative_suppliers_names:
            print(
                f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {', '.join(alternative_suppliers_names)}"
            )

            # –î–ª—è –∫–∞–∂–¥–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏: —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            for alt_supplier in alternative_suppliers_names:
                supplier_contracts = product_contracts[
                    product_contracts["supplier_name"] == alt_supplier
                ]
                avg_price = supplier_contracts["unit_price_eur"].mean()
                num_contracts = supplier_contracts.shape[0]

                # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —á–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞, —Ç–µ–º –ª—É—á—à–µ
                # –ú–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å: —É—á–µ—Å—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –æ–±—ä–µ–º, –æ—Ç–∑—ã–≤—ã –∏ —Ç.–¥.
                recommendation_score = 0
                if num_contracts > 0:
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, 100 / avg_price –¥–ª—è –∏–Ω–≤–µ—Ä—Å–∏–∏, —á—Ç–æ–±—ã –º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞ –¥–∞–≤–∞–ª–∞ –±–æ–ª—å—à–∏–π –±–∞–ª–ª
                    # + –±–∞–ª–ª—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                    recommendation_score = (1000 / avg_price) + (num_contracts * 5)

                alternative_suppliers_details.append(
                    {
                        "supplier_name": alt_supplier,
                        "avg_price": avg_price,
                        "num_contracts": num_contracts,
                        "recommendation_score": recommendation_score,
                    }
                )
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–∞–ª–ª–∞
            alternative_suppliers_details.sort(
                key=lambda x: x["recommendation_score"], reverse=True
            )
        else:
            print("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        market_analysis_text = "–†—ã–Ω–æ–∫: "
        if len(all_product_suppliers) <= 2:
            market_analysis_text += "–í—ã—Å–æ–∫–æ–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π."
        elif len(all_product_suppliers) <= 5:
            market_analysis_text += "–£–º–µ—Ä–µ–Ω–Ω–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π."
        else:
            market_analysis_text += "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π."

        alternatives_by_product[product] = {
            "current_suppliers": current_suppliers,
            "alternative_suppliers": alternative_suppliers_details,
            "market_analysis": market_analysis_text,
            "alternatives_found": len(
                alternative_suppliers_details
            ),  # <-- –≠—Ç–æ—Ç –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å!
        }
    return alternatives_by_product


def analyze_alternative_suppliers(current_project_data, all_contracts_data, discipline):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    alternatives = find_alternative_suppliers_logical(
        current_project_data, all_contracts_data, discipline
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    formatted_results = {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
    for product, product_alternatives in alternatives.items():
        formatted_results[product] = {  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ –∫–ª—é—á—É –ø—Ä–æ–¥—É–∫—Ç–∞
            "current_suppliers": product_alternatives["current_suppliers"],
            "alternatives_found": len(  # <-- –ò –∑–¥–µ—Å—å –æ–Ω —Ç–∞–∫–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è
                product_alternatives["alternative_suppliers"]
            ),
            "top_alternatives": product_alternatives["alternative_suppliers"][
                :5
            ],  # –¢–æ–ø-5
            "market_analysis": product_alternatives["market_analysis"],
            "recommendation": generate_product_recommendation(product_alternatives),
            "alternative_suppliers": product_alternatives[
                "alternative_suppliers"
            ],  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        }

    return formatted_results


def generate_product_recommendation(product_alternatives):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
    """
    alternatives_count = len(product_alternatives["alternative_suppliers"])

    if alternatives_count == 0:
        return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."
    elif alternatives_count <= 2:
        return f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {alternatives_count} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."
    else:
        return f"–•–æ—Ä–æ—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {alternatives_count} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–æ—Å—Ç—É–ø–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."
